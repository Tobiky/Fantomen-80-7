// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PreFab.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
using Microsoft.Xna.Framework;
namespace Basic_Pathfinder.PreFab {

  /// <summary>Holder for reflection information generated from PreFab.proto</summary>
  public static partial class PreFabReflection {

    #region Descriptor
    /// <summary>File descriptor for PreFab.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PreFabReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxQcmVGYWIucHJvdG8iIAoITG9jYXRpb24SCQoBeBgBIAEoBRIJCgF5GAIg",
            "ASgFIh0KA09icxIWCgNwb3MYASABKAsyCS5Mb2NhdGlvbiJwCgZQcmVGYWIS",
            "EAoIbm9kZVNpemUYASABKAUSIAoNc3RhcnRpbmdQb2ludBgCIAEoCzIJLkxv",
            "Y2F0aW9uEhwKCWdvYWxQb2ludBgDIAEoCzIJLkxvY2F0aW9uEhQKBnByZWZh",
            "YhgEIAMoCzIELk9ic0IaqgIXQmFzaWNfUGF0aGZpbmRlci5QcmVGYWJiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Basic_Pathfinder.PreFab.Location), global::Basic_Pathfinder.PreFab.Location.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Basic_Pathfinder.PreFab.Obs), global::Basic_Pathfinder.PreFab.Obs.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Basic_Pathfinder.PreFab.PreFab), global::Basic_Pathfinder.PreFab.PreFab.Parser, new[]{ "NodeSize", "StartingPoint", "GoalPoint", "Prefab" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Basic_Pathfinder.PreFab.PreFabReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }
        public static implicit operator Location(Point other) => new Location{ X = other.X, Y = other.Y };
        public static implicit operator Point(Location other) => new Point(other.X, other.Y);
  }

  public sealed partial class Obs : pb::IMessage<Obs> {
    private static readonly pb::MessageParser<Obs> _parser = new pb::MessageParser<Obs>(() => new Obs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Obs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Basic_Pathfinder.PreFab.PreFabReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Obs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Obs(Obs other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Obs Clone() {
      return new Obs(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Basic_Pathfinder.PreFab.Location pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Basic_Pathfinder.PreFab.Location Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Obs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Obs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Obs other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Basic_Pathfinder.PreFab.Location();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Basic_Pathfinder.PreFab.Location();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }
        public static implicit operator Obs(Obstacle obst) => new Obs{ Pos = obst.Location };
  }

  public sealed partial class PreFab : pb::IMessage<PreFab> {
    private static readonly pb::MessageParser<PreFab> _parser = new pb::MessageParser<PreFab>(() => new PreFab());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreFab> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Basic_Pathfinder.PreFab.PreFabReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreFab() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreFab(PreFab other) : this() {
      nodeSize_ = other.nodeSize_;
      StartingPoint = other.startingPoint_ != null ? other.StartingPoint.Clone() : null;
      GoalPoint = other.goalPoint_ != null ? other.GoalPoint.Clone() : null;
      prefab_ = other.prefab_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreFab Clone() {
      return new PreFab(this);
    }

    /// <summary>Field number for the "nodeSize" field.</summary>
    public const int NodeSizeFieldNumber = 1;
    private int nodeSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NodeSize {
      get { return nodeSize_; }
      set {
        nodeSize_ = value;
      }
    }

    /// <summary>Field number for the "startingPoint" field.</summary>
    public const int StartingPointFieldNumber = 2;
    private global::Basic_Pathfinder.PreFab.Location startingPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Basic_Pathfinder.PreFab.Location StartingPoint {
      get { return startingPoint_; }
      set {
        startingPoint_ = value;
      }
    }

    /// <summary>Field number for the "goalPoint" field.</summary>
    public const int GoalPointFieldNumber = 3;
    private global::Basic_Pathfinder.PreFab.Location goalPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Basic_Pathfinder.PreFab.Location GoalPoint {
      get { return goalPoint_; }
      set {
        goalPoint_ = value;
      }
    }

    /// <summary>Field number for the "prefab" field.</summary>
    public const int PrefabFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Basic_Pathfinder.PreFab.Obs> _repeated_prefab_codec
        = pb::FieldCodec.ForMessage(34, global::Basic_Pathfinder.PreFab.Obs.Parser);
    private readonly pbc::RepeatedField<global::Basic_Pathfinder.PreFab.Obs> prefab_ = new pbc::RepeatedField<global::Basic_Pathfinder.PreFab.Obs>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Basic_Pathfinder.PreFab.Obs> Prefab {
      get { return prefab_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreFab);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreFab other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeSize != other.NodeSize) return false;
      if (!object.Equals(StartingPoint, other.StartingPoint)) return false;
      if (!object.Equals(GoalPoint, other.GoalPoint)) return false;
      if(!prefab_.Equals(other.prefab_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeSize != 0) hash ^= NodeSize.GetHashCode();
      if (startingPoint_ != null) hash ^= StartingPoint.GetHashCode();
      if (goalPoint_ != null) hash ^= GoalPoint.GetHashCode();
      hash ^= prefab_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeSize != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NodeSize);
      }
      if (startingPoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartingPoint);
      }
      if (goalPoint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GoalPoint);
      }
      prefab_.WriteTo(output, _repeated_prefab_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeSize);
      }
      if (startingPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartingPoint);
      }
      if (goalPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoalPoint);
      }
      size += prefab_.CalculateSize(_repeated_prefab_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreFab other) {
      if (other == null) {
        return;
      }
      if (other.NodeSize != 0) {
        NodeSize = other.NodeSize;
      }
      if (other.startingPoint_ != null) {
        if (startingPoint_ == null) {
          startingPoint_ = new global::Basic_Pathfinder.PreFab.Location();
        }
        StartingPoint.MergeFrom(other.StartingPoint);
      }
      if (other.goalPoint_ != null) {
        if (goalPoint_ == null) {
          goalPoint_ = new global::Basic_Pathfinder.PreFab.Location();
        }
        GoalPoint.MergeFrom(other.GoalPoint);
      }
      prefab_.Add(other.prefab_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NodeSize = input.ReadInt32();
            break;
          }
          case 18: {
            if (startingPoint_ == null) {
              startingPoint_ = new global::Basic_Pathfinder.PreFab.Location();
            }
            input.ReadMessage(startingPoint_);
            break;
          }
          case 26: {
            if (goalPoint_ == null) {
              goalPoint_ = new global::Basic_Pathfinder.PreFab.Location();
            }
            input.ReadMessage(goalPoint_);
            break;
          }
          case 34: {
            prefab_.AddEntriesFrom(input, _repeated_prefab_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
